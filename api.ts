/**
 * basicnodeblog
 * Basic blog engine serving static content
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as querystring from "querystring";
import * as url from "url";

import * as isomorphicFetch from "isomorphic-fetch";
import * as assign from "core-js/library/fn/object/assign";

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "https://localhost:8080/api/v1".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: any;
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
};

export interface Name {
    "first": string;
    "last"?: string;
}

export interface User {
    "id": number;
    "email": string;
    "name": Name;
    "status"?: UserStatusEnum;
    "phoneNumbers": Array<string>;
}

export type UserStatusEnum = "Happy" | "Sad";
export interface UserCreationRequest {
    "email": string;
    "name": Name;
    "phoneNumbers": Array<string>;
}



/**
 * DefaultApi - fetch parameter creator
 */
export const DefaultApiFetchParamCreator = {
    /**
     * 
     * @param requestBody 
     */
    createUser(params: {  "requestBody": UserCreationRequest; }, options?: any): FetchArgs {
        // verify required parameter "requestBody" is set
        if (params["requestBody"] == null) {
            throw new Error("Missing required parameter requestBody when calling createUser");
        }
        const baseUrl = `/Users`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["requestBody"]) {
            fetchOptions.body = JSON.stringify(params["requestBody"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @param id 
     * @param authorization 
     */
    getPrivateUser(params: {  "id": number; "authorization": string; }, options?: any): FetchArgs {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling getPrivateUser");
        }
        // verify required parameter "authorization" is set
        if (params["authorization"] == null) {
            throw new Error("Missing required parameter authorization when calling getPrivateUser");
        }
        const baseUrl = `/Users/{id}`
            .replace(`{${"id"}}`, `${ params["id"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = assign({
            "Authorization": params["authorization"],
        }, contentTypeHeader, fetchOptions.headers);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * DefaultApi - functional programming interface
 */
export const DefaultApiFp = {
    /**
     * 
     * @param requestBody 
     */
    createUser(params: { "requestBody": UserCreationRequest;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = DefaultApiFetchParamCreator.createUser(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @param id 
     * @param authorization 
     */
    getPrivateUser(params: { "id": number; "authorization": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
        const fetchArgs = DefaultApiFetchParamCreator.getPrivateUser(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * DefaultApi - object-oriented interface
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param requestBody 
     */
    createUser(params: {  "requestBody": UserCreationRequest; }, options?: any) {
        return DefaultApiFp.createUser(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @param id 
     * @param authorization 
     */
    getPrivateUser(params: {  "id": number; "authorization": string; }, options?: any) {
        return DefaultApiFp.getPrivateUser(params, options)(this.fetch, this.basePath);
    }
};

/**
 * DefaultApi - factory interface
 */
export const DefaultApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param requestBody 
         */
        createUser(params: {  "requestBody": UserCreationRequest; }, options?: any) {
            return DefaultApiFp.createUser(params, options)(fetch, basePath);
        },
        /**
         * 
         * @param id 
         * @param authorization 
         */
        getPrivateUser(params: {  "id": number; "authorization": string; }, options?: any) {
            return DefaultApiFp.getPrivateUser(params, options)(fetch, basePath);
        },
    };
};

